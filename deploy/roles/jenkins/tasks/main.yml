---

#Jenkins_node_type is defined in the calling playbook
- name: "Include the '{{ jenkins_node_type }}' installation specific variables" 
  include_vars: "{{ jenkins_node_type }}.yml"


- name: Copy the initial configuration before first startup (CJOC)
  #Proceeding this way is important so that the noWizard parameter works properly
  become: true
  copy:
    src: "{{ package_name }}"
    dest: "/etc/default/{{ package_name }}"
    force: no
    backup: yes
    owner: "root"
    group: "root"
    mode: u=rw,g=r,o=r
  when: jenkins_node_type is search("cjoc")


- name: Load the full DNS names of the Infra into variables
  set_fact:
      full_cjoc_dns_name: "{{ lookup('env','cjoc_dns') }}"
      full_cm_dns_name: "{{ lookup('env','cm_dns') }}"
      full_agent1_dns_name: "{{ lookup('env','agent1_dns') }}"
      full_agent_docker_dns_name: "{{ lookup('env','agent_docker_dns') }}"


- name: Copy and update the initial configuration before first startup (Master)
  #Proceeding this way is important so that the noWizard parameter works properly
  become: true
  template:
    src: "{{ package_name }}.j2"
    dest: "/etc/default/{{ package_name }}"
    force: no
    backup: yes
    owner: "root"
    group: "root"
    mode: u=rw,g=r,o=r
  when: jenkins_node_type is search("master")


- name: Add the {{ option_friendly_name }} APT Key
  become: true
  apt_key:
    url: "{{ key_url }}"
    state: present

- name: Add the {{ option_friendly_name }} package repository
  become: true
  apt_repository:
    repo: "{{ repo_url }}"
    state: present

# To force a particular version:  "{{ package_name }}=2.138.3.1"
- name: Install {{ option_friendly_name }}
  become: true
  apt:
    update_cache: yes
    name: "{{ package_name }}"

- name: create the init.groovy.d directory
  become: true
  file:
    path: "/var/lib/{{ jenkins_user }}/init.groovy.d"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_user }}"
    mode: "u=rwx,g=rx,o=rx"

- name: Prepare everything to load the license on CJOC
  include_tasks: load-license.yml
  when: jenkins_node_type is search("cjoc")

- name: Load initial user creation and security settings
  include_tasks: initial_jenkins_config.yml

# This will load the properties and execute the initscripts 
- name: restart the {{ package_name }} service 
  become: true
  service:
    name: "{{ package_name }}"
    state: restarted


#We do not specify the controler (wildcard) as the name is not stable on EC2
- name: redirect the traffic from 80 to {{ used_port }} with IPtables
  become: yes
  iptables:
    table: nat
    chain: PREROUTING
    protocol: tcp
    match: tcp
    destination_port: "80"
    jump: REDIRECT
    to_ports: "{{ used_port }}"
    #comment: "Redirect web traffic to port {{ used_port }}"

# - name: Second part of the redirection from 80 to {{ used_port }}
#   become: yes
#   iptables:
#     table: nat
#     chain: OUTPUT
#     protocol: tcp
#     match: tcp
#     destination: "0.0.0.0/0"
#     destination_port: "80"
#     jump: REDIRECT
#     to_ports: "{{ used_port }}"


- name: "wait for the port {{ used_port }} to be available"
  wait_for: 
    port: "{{ used_port }}" 
    delay: 10

# url /instance-identity doesn't work with client master
- name: wait for jenkins to be up
  uri: 
    url: "http://localhost:{{ used_port }}/login" 
    status_code: "200" 
  register: result
  until: result.status == 200
  retries: 60
  delay: 1

- name: register the Jenkins SSH server public key in the known_hosts file
  shell: "ssh-keyscan -t rsa,dsa -p {{ sshd_port }} localhost > ~/.ssh/known_hosts"

## ---> used for debuging

- name: Create a CLI command varialble on remote (for debug purposes)
  template:
    src: "remote_CLI_config.j2"
    dest: "{{jenkins_cfgmgt_dir}}/load_CLI_command.sh"
    force: yes
    mode: u=rwx,g=rx,o=rx

- name: Copy a README to explain how to use the CLI command
  copy:
    src: "remote-CLI-readme.txt"
    dest: "{{jenkins_cfgmgt_dir}}/CLI_README.txt"
    force: yes
    mode: u=rwx,g=rx,o=rx    

# NOTE: doesn't work on Client Master
# - name: copy jenkins-cli .jar to cfgMgt directory
#   get_url:
#     url: "http://localhost:{{used_port}}/jnlpJars/jenkins-cli.jar"
#     dest: "{{jenkins_cfgmgt_dir}}/jenkins-cli.jar"

# - name: create command line

## <--- used for debuging

- name: "create \"{{ jenkins_cfgmgt_script_dir }}\" to store the script executed by these scripts"
  file:
    path: "{{ jenkins_cfgmgt_script_dir }}"
    state: directory
    mode: u=rwx,g=rx,o=rx

- name: Install default plugins
  shell: "{{ CLI_command }} install-plugin {{item}} -deploy"
  loop: "{{ default_plugins }}"

- name: create the Client Master
  include_tasks: create-client-master.yml
  when: jenkins_node_type is search("cjoc")