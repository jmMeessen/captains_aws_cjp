---

- name: Load encrypted default admin password
  include_vars: "default_admin_password.yml"

#this assumes that the `init.groovy.d` directory has been previously created
- name: Update the initialize groovy and copy it to the target directory
  become: true
  template: 
    src: "initial_security.groovy.j2"
    dest: "{{ jenkins_home_dir }}/init.groovy.d/000-initial_security.groovy"
    force: yes
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_user }}"
    mode: u=rw,g=r,o=r   

# - name: initialize the DNS name
#   set_fact:
#     full_dns_name: "bad"

# - name: load the DNS name if we are handling the CJOC
#   set_fact:
#     full_dns_name: "{{ full_cjoc_dns_name }}"
#     when: dns_reference == "cjoc_dns"

# - name: load the DNS name if we are handling the CM
#   set_fact:
#     full_dns_name: "{{ full_cm_dns_name }}"
#     when: dns_reference == "cm_dns"

- name: retrieve the full DNS name of the host we are on
  uri: 
    url: http://169.254.169.254/latest/meta-data/public-hostname
    return_content: yes
  register: full_dns_name
  
- name: display loaded DNS name
  debug:
    var: full_dns_name

# - name: "get DNS name for {{ dns_reference }} "
#   command: "terraform output -state=../terraform/terraform.tfstate {{ terraform_dns_reference }}"
#   delegate_to: localhost
#   register: full_dns_name

- name: "Update the set URL groovy ({{ full_dns_name.content}}) and copy it to the target directory"
  become: true
  template: 
    src: "set_url.groovy.j2"
    dest: "{{ jenkins_home_dir }}/init.groovy.d/002-set_url.groovy"
    force: yes
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_user }}"
    mode: u=rw,g=r,o=r   

- name: "Copy the JNLP port setting init groovy script"
  become: true
  copy: 
    src: "set-JNLP-port.groovy"
    dest: "{{ jenkins_home_dir }}/init.groovy.d/003-set-JNLP-port.groovy"
    force: yes
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_user }}"
    mode: u=rw,g=r,o=r   

- name: "Create init script to configure the SSHD port"
  become: true
  template: 
    src: "configure_sshd.groovy.j2"
    dest: "{{ jenkins_home_dir }}/init.groovy.d/004-configure_sshd.groovy"
    force: yes
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_user }}"
    mode: u=rw,g=r,o=r  

# Done under the user that performs the remote command (ea. ubuntu)
- name: "Generate Jenkins CfgMgt SSH key"
  command : 'ssh-keygen -q -b 2048 -t rsa -f {{ jenkins_cfgmgt_ssh_key }} -C "" -N ""'
  args:
    creates: "{{ jenkins_cfgmgt_ssh_key }}"

- name: Get the Jenkins CfgMgt SSH public key.
  shell: "cat {{ jenkins_cfgmgt_ssh_key }}.pub"
  register: CfgMgt_pub_key

- name: "Create init script to create the special Jenkins CfgMgr user"
  become: true
  template: 
    src: "create_cfgmgt_user.groovy.j2"
    dest: "{{ jenkins_home_dir }}/init.groovy.d/005-create_cfgmgt_user.groovy"
    force: yes
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_user }}"
    mode: u=rw,g=r,o=r  




